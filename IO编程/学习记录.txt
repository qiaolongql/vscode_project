3、 命令方式操作文件和目录
    python在模块os中集成了可以直接调用操作系统提供的接口函数的方法
    通过import os 可以让我们像使用命令行那样操作文件和目录
    os.name  #操作系统类型 posix表示linux nt表示windows
    os.uname()  #获取详细的系统信息(无法在windows系统上使用)
    os.environ  #保存着系统中定义的所有系统变量
    os.environ.get("key")  #获取某个环境变量的值

    os.path.abspath(".")  #查看当前目录的绝对路径
    os.path.join("/User/me","mydir")  #组合路径为/User/me/mydir
    os.mkdir("/User/me/mydir")  #创建文件夹
    os.rmdir("/User/me/mydir")  #删除文件夹,非空时OSError异常
    把两个路径合成一个时候,不要直接合并字符串，应通过os.path.join()
        函数合并，这样可以处理不同系统的路径分隔符
    os.path.split("/User/me/mydir")  #分割路径为/User/me和/mydir
    os.path.splitext("路径")  #可以直接获得扩展名/path/a和.txt
    os.rename("源文件名","重命名文件名")  #重命名文件
    os.renames(old,new)  #递归对目录更名
    os.remove("文件")  #删除文件
    os.unlink(path)  #删除文件
    os.removedirs(path)  #递归删除目录
    模块shutil.copyfile()函数可以复制文件
    os.getcwd()  #获取当前路径
    os.chdir(path)  #改变当前工作路径
    os.chmod(path,mode)  #更改权限
    os.chown(path,uid,gid)  #更改文件所有者
    os.listdir(path)  #返回指定文件夹下的文件和目录的名字列表
    os.stat(path)  #返回文件或目录的信息

    os.path.basename(path)  #返回一个目录的基名,split返回的第二部分
        注意:/home/joe返回joe  而 /home/joe/返回空
    os.path.dirname(path)  #split()返回的第一部分
    os.path.exists(path)  #路径或文件描述符是否存在True/False
    os.path.getatime(path)  #最后访问时间
           .getctime(path)  #最后文件元数据修改时间
           .getmtime(path)  #最后文件内容修改时间
           .getsize(path)   #得到文件大小
           都通过os.stat(path)进行报告
    os.path.isabs(path)  #是否绝对路径True/False
           .isdir(path)  #是否目录True/False
           .isfile(path)  #是否文件True/False
           .islink(path)  #是否软链接True/False
           .ismount(path)  #是否挂载点True/False
    os.path.repath(path)  #返回真是路径而非软链接
    os.path.samefile(path1,path2)  #是否指向同一个文件
           .sameopenfile(path1,path2) #打开文件是否同一个文件

4、序列化(pickling)
    序列化:变量从 内存->可存储/可传输 称为序列化,反之为反序列化
           序列化之后就可以把内容写入磁盘或传输到网络
    通过import pickle:(序列化为bytes)
        pickle.dump(x,f)  #序列化x并写入文件对象f,也可省略f只序列化
        x=pickle.load(f)  #从文件f反序列化并保存到x
        这种序列化方式只能在python中使用
    序列化为json标准格式:(返回字符串,JSON编码为utf-8)
        import json
        json.dumps(x)  #将字典x转化成json格式,返回str
        json.dump(x,f) #序列化为json格式直接写入文件
        json.loads(json字符串)  #将json反序列化为python对象
        json.load(f)  #从类似文件中读取字符串反序列化


