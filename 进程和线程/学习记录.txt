多任务的实现方式3种:
    多进程模式:一个任务一个进程,进程内部只有一个线程,可通过此进程创建多个子进程来处理多任务
    多线程模式:一个进程里有多个线程,一个应用一个进程,多任务通过在进程内创建多个子线程完成
    多进程+多线程模式:一个进程有多个线程,一个应用有多个进程
一个进程中至少有一个线程来执行任务,一个进程内的多个线程共享数据
要实现多任务一般设计Master-Worker模式,Master负责分配任务,Worker负责执行任务
    多进程:主进程是Master,其它进程是Worker
    多线程:主线程是Master,其他线程是Worker
优缺点：
    多进程:稳定性好,任何一个子进程崩溃不会影响其它子进程和主进程
           创建进程代价大
    多线程:速度更快一些,不过也快不了多少
           由于线程共享内存,所以一个线程崩溃会导致整个程序崩溃
线程切换:
    任务切换时系统需要保存环境(寄存器状态,内存页等等)和准备新环境(恢复寄存器状态,切换内存页)
    所以无论多进程还是多线程,多任务切换都会消耗系统资源
计算密集型和IO密集型:
    计算密集型:需要占用大量的cpu资源,所以要求更高效的利用cpu资源,不要把资源浪费在过多的任务切换上
               一般计算密集型任务同时进行的数量应当等于cpu的核心数
               注重代码运行效率,所以一般应采用偏底层的语言(如C),而不要采用执行效率慢的脚本语言
    IO密集型:涉及网络、磁盘IO的任务,一般对cpu资源需求较低,大部分时间都在等待IO操作的完成
             因为IO的速度远低于 cpu和内存的速度,所以多任务可以提高cpu的效率
             此类任务由于绝大部分时间在等待IO,所以执行效率较高的C语言对其提升不大
多核CPU:
    对于C、C++、JAVA等于语言,可以将多个线程分别给CPU不同的核并行执行,但在python中无法实现
    原因是官方在解释器中设计了GIL锁(Global Interpreter Lock),任何线程在执行前必须获得GIL锁,
    解释器每执行100条字节码会释放一次GIL锁给别的线程,所以多线程在python中只能交替执行,从而
    只能用到一个CPU核心.
    python中可以通过多进程来实现多核任务
异步IO:
    现代操作系统大多支持异步IO,从而可以在单进程单线程模型中执行多任务,这种模型称为事件驱动模型
    在多核CPU上,可以运行多个进程=CPU核心数,来充分利用多核CPU
    python中的单线程异步模型称为协程